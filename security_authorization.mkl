@label("Segurança")//xxx
domain security

@label("Autorização")
service authorization {
	
	config {
		groupId: "br.com.kerubin.api"
		version: "1.0.0"
		cloudConfigUri: "http://localhost:9091"
		servicePort: 9002
		
		messagingCore {version:"1.0.0"}
		databaseCore {version:"1.0.0"}
	}
	
	@baseRepository
	@auditing
	@label("Usuário")
	
	@filterDef( // xxxx
		name:"userFilter", 
		parameters:	[
			paramDef(name:"tenant", type:"java.util.UUID")
		]
	)

	@filters( [
	    filter(name:"userFilter", condition:":tenant = tenant")
	] )
	
	entity SysUser { //xxx
		
		id: uuid
		
		name: string index(name: sysuser_name_lower_idx expression: "lower(name)")
		label: "Nome do usuário"
		web(styleClass: "ui-md-8")
		autoComplete
		listFilter(many: "Nome do(s) usuário(s)")
		
		cnpjCPF: string[20]? index
		validation(name: CpfOrCnpj 	message: "CPF/CNPJ inválido.")
		label: "Documento (CNPJ/CPF)"
		web(styleClass: "ui-md-4")
		grid(hidden)
		
		email: string index
		validation(name: Email)
		label: "E-mail (usuário para login no sistema)"
		web(styleClass: "ui-md-12")
		autoComplete
		
		password: string password	
		label: "Senha"
		web(styleClass: "ui-md-6")
		grid(hidden)
		
		confirmPassword: string password transient	
		label: "Confirmação da senha"
		web(styleClass: "ui-md-6")
		grid(hidden)
		//////
		
		active: boolean default: false?
		label: "Ativo"
		web(styleClass: "ui-md-2")
		
		administrator: boolean default: false?
		label: "Administrador"
		web(styleClass: "ui-md-2")
		
		superAdministrator: boolean default: false?
		label: "Super Administrador"
		web(styleClass: "ui-md-2")
		hidden
		////////		
		
		accountType: AccountType
		label: "Tipo da conta"
		web(styleClass: "ui-md-2" readOnly)
		autoComplete
		hidden
		
		tenant: refers Tenant? manyToOne(fetch: eager)
		label: "Tenant"
		web(styleClass: "ui-md-10" readOnly)
		hidden
		////////////
		
		activationDate: dateTime?
		label: "Data da ativação"
		web(styleClass: "ui-md-2" readOnly)
		grid(hidden)
		hidden
		
		confirmed: boolean default: false?
		label: "E-mail confirmado"
		web(styleClass: "ui-md-2" readOnly)
		grid(hidden)
		hidden
		
		confirmationDate: dateTime?
		label: "Data da confirmação"
		web(styleClass: "ui-md-2" readOnly)
		grid(hidden)
		hidden
		
		confirmationId: string?
		label: "Identificador da confirmação"
		web(styleClass: "ui-md-12" readOnly)
		grid(hidden)
		hidden
		
		rules {
			//TODO: with(form).apply(confirmPassword = "*****").when(entityForm.onCreate)
			//with(form).apply(disableCUD).when(id.isNotNull and administrator.isEquals("true")) // Não pode alterar usuário ADM
		}
	}
	
	@label("Tenant")
	entity Tenant {
		
		id: uuid
		
		name: string index(name: tenant_name_lower_idx expression: "lower(name)")
		label: "Nome"
		web(styleClass: "ui-md-12")
		autoComplete
		listFilter(many: "Nome do(s) tenant(s)")
		
		
		maxUsers: integer
		label: "Quantidade máxima de usuários"
		web(styleClass: "ui-md-2")
		
		balance: money
		label: "Saldo do tenant"
		
		active: boolean?
		label: "Ativo"
		web(styleClass: "ui-md-2")
	}
	
	@label("Contagem de operações por tenant")
	entity TenantOpCount {
		
		id: uuid
		
		// Necessário só porque dá erro na @Query gerada se não tiver um campo string
		description: string?
		
		tenant: refers Tenant manyToOne
		label: "Tenant"
		
		yearOp: integer
		label: "Ano da operação"
		
		monthOp: integer
		label: "Mês da operação"
		
		dayOp: integer
		label: "Dia da operação"
		
		HourOp: integer
		label: "Hora da operação"		
		
		countGet: integer
		label: "Quantidade de operações GET simples"
		
		countPost: integer
		label: "Quantidade de operações POST"
		
		countPut: integer
		label: "Quantidade de operações PUT"
		
		countDelete: integer
		label: "Quantidade de operações DELETE"
		
		countList: integer
		label: "Quantidade de operações LIST"
		
		countAutoComplete: integer
		label: "Quantidade de operações AUTO COMPLETE"
		
		countOp: integer
		label: "Quantidade de outras operações"
		
	}
	
	@auditing
	@label("Saldo do tenant")
	entity TenantSaldo {
		
		// Necessário só porque dá erro na @Query gerada se não tiver um campo string
		nomeTenant: string? index(name: tenantsaldo_nometenant_lower_idx expression: "lower(nome_tenant)")
		grid(hidden)
		hidden
		
		tenant: refers Tenant manyToOne
		label: "Tenant"
		grid(hidden)
		hidden
		
		descricao: string
		label: "Descrição"
		web(styleClass: "ui-md-12")
		
		saldoInicial: money
		label: "Saldo inicial"
		web(styleClass: "ui-md-2")
		
		valorCredito: money
		label: "Valor creditado"
		web(styleClass: "ui-md-2")
		sum(styleClass:"kb-conta-valor-pago" label:"A")
		
		saldo: money
		label: "Saldo"
		web(styleClass: "ui-md-2")
		
	}
	
	
	@filterDef( // xxx
		name:"creditOrder", 
		parameters:	[
			paramDef(name:"orderTenantName", type:"string")
		]
	)

	@filters( [
	    filter(name:"creditOrder", condition:":orderTenantName = order_tenant_name")
	] )
	
	@auditing
	@label("Pedido de créditos")
	entity creditOrder {
		id: uuid
		listFilter(isEqualTo: "Protocolo de identificação" styleClass: "ui-md-12") 
		hidden
		grid(label:"Protocolo" columnWidth: "90px" showDataWithIcon(icon: "pi pi-info-circle" size: "2em"))
		
		orderUserName: string index(name: creditorder_orderusername_lower_idx expression: "lower(order_user_name)")
		label: "Usuário solicitante"
		web(styleClass: "ui-md-12")
		grid(columnWidth: "150px")
		listFilter(many: "Usuário solicitante")
		
		orderTenantName: string
		label: "Tenant do usuário"
		web(styleClass: "ui-md-12")
		grid(hidden)
		hidden
		
		orderUser: refers SysUser manyToOne
		label: "Usuário que realizou o pedido"
		web(styleClass: "ui-md-12")
		grid(hidden)
		hidden
		
		/////
		
		orderDate: date
		label: "Data do pedido"
		web(styleClass: "ui-md-2")
		listFilter(between: "Pedidos de;até;Data dos pedidos")
		
		orderValue: money
		label: "Valor do pedido"
		web(styleClass: "ui-md-3")
		sum
		listFilter(between: "Pedidos com valores de;até;" styleClass: "ui-md-3")
		
		orderBonusValue: money
		label: "Valor Bônus"
		web(styleClass: "ui-md-2")
		sum
		
		orderTotalCredits: money
		label: "Total créditos"
		web(styleClass: "ui-md-2")
		sum
		
		paymentMethod: PaymentMethod
		web(styleClass: "ui-md-2")
		
		paymentMethodDescription: string?
		label: "Complemento"
		web(styleClass: "ui-md-10")
		grid(columnWidth: "100px")
		
		orderStatus: OrderStatus
		web(styleClass: "ui-md-4")
		grid(columnWidth: "90px")
		listFilter(isEqualTo: "Situação do pedido" styleClass: "ui-md-4")
		
		orderPaidDate: date?
		label: "Data pagamento"
		web(styleClass: "ui-md-2")
		
		orderCanceledDate: date?
		label: "Data cancelamento"
		web(styleClass: "ui-md-2")
		grid(columnWidth: "95px")
		
		////
		orderHistory: string?
		label: "Histórico"
		web(styleClass: "ui-md-12")
		grid(showDataWithIcon(icon: "pi pi-clock"))
		
		rules {
			with(grid.rows)
				.apply(styleClass: "kb-conta-paga"  label: "Pedido pago")
				.when(id.isNotNull and orderPaidDate.isNotNull /*orderStatus.isEquals(OrderStatus.PAID)*/)
				
			with(grid.rows)
				.apply(styleClass: "kb-conta-vence-hoje"  label: "Pedido cancelado")
				.when(id.isNotNull and orderCanceledDate.isNotNull /*orderStatus.isEquals(OrderStatus.CANCELED)*/)
				
			
				
			with(grid.actions).apply(hideWebListActions)
			// with(grid.actions).apply(hideCUDWebListActions)
			// with(grid.actions).apply(webActionsColumn {width: "4.5em"})
		}
	}
	
	// De uso exclusivo da equipe do Kerubin.
	@auditing
	@disableGeneration(sqlDDL)
	@label("Pedido de créditos (Kerubin)")
	entity creditOrderAdmin alias creditOrder {
		id: uuid
		listFilter(isEqualTo: "Protocolo de identificação" styleClass: "ui-md-12") 
		hidden
		grid(label:"Protocolo" columnWidth: "90px" showDataWithIcon(icon: "pi pi-info-circle" size: "2em"))
		
		orderUserName: string
		label: "Usuário solicitante"
		web(styleClass: "ui-md-12")
		grid(columnWidth: "150px")
		listFilter(many: "Usuário solicitante")
		
		orderTenantName: string
		label: "Tenant do usuário"
		web(styleClass: "ui-md-12")
		listFilter(many: "Tenant solicitante")
		
		orderUser: refers SysUser manyToOne
		label: "Usuário que realizou o pedido"
		web(styleClass: "ui-md-12")
		grid(hidden)
		
		/////
		
		orderDate: date
		label: "Data do pedido"
		web(styleClass: "ui-md-2")
		listFilter(between: "Pedidos de;até;Data dos pedidos")
		
		orderValue: money
		label: "Valor do pedido"
		web(styleClass: "ui-md-3")
		sum
		listFilter(between: "Pedidos com valores de;até;" styleClass: "ui-md-3")
		validation(name: DecimalMin custom: "value=\"0\", inclusive=false" message: "\\\"Valor do pedido\\\" deve ser maior do que zero.")
		
		orderBonusValue: money
		label: "Valor Bônus"
		web(styleClass: "ui-md-2")
		sum
		
		orderTotalCredits: money
		label: "Total créditos"
		web(styleClass: "ui-md-2")
		sum
		
		paymentMethod: PaymentMethod
		web(styleClass: "ui-md-2")
		
		paymentMethodDescription: string?
		label: "Complemento"
		web(styleClass: "ui-md-10")
		grid(columnWidth: "100px")
		
		orderStatus: OrderStatus
		web(styleClass: "ui-md-4")
		grid(columnWidth: "90px")
		listFilter(isEqualTo: "Situação do pedido" styleClass: "ui-md-4")
		
		orderPaidDate: date?
		label: "Data pagamento"
		web(styleClass: "ui-md-2")
		validation(name: Future message: "\\\"Data de pagamento\\\" não pode ser futura.")
		
		orderCanceledDate: date?
		label: "Data cancelamento"
		web(styleClass: "ui-md-2")
		grid(columnWidth: "95px")
		validation(name: Future message: "\\\"Data de cancelamento\\\" não pode ser futura.")
		
		////
		orderHistory: string?
		label: "Histórico"
		web(styleClass: "ui-md-12")
		grid(showDataWithIcon(icon: "pi pi-clock"))
		
		rules {
			with(grid.rows)
				.apply(styleClass: "kb-conta-paga"  label: "Pedido pago")
				.when(id.isNotNull and orderPaidDate.isNotNull /*orderStatus.isEquals(OrderStatus.PAID)*/)
				
			with(grid.rows)
				.apply(styleClass: "kb-conta-vence-hoje"  label: "Pedido cancelado")
				.when(id.isNotNull and orderCanceledDate.isNotNull /*orderStatus.isEquals(OrderStatus.CANCELED)*/)
			
		}
	}
	
	@label("Situação do pedido")
	enum OrderStatus {
		AWAITING_PAYMENT
		label: "Aguardando pagamento"
		default
		
		PAID
		label: "Pago"
		
		CANCELED
		label: "Cancelado"
	}
	
	@label("Forma de pagamento")
	enum PaymentMethod {
		
		CASH
		label: "Dinheiro"
		default
		
		BANK_ACCOUNT
		label: "Conta bancária"
		
		CREDIT_CARD
		label: "Cartão de crédito"
		
		BANK_SLIP
		label: "Boleto bancário"
		
	}
	
	@label("Tipo da conta")
	enum AccountType {
		PERSONAL 
		label: "Pessoal"
		default
		
		CORPORATE 
		label: "Corporativa"
	}
	
}