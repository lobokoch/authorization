/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.security.authorization.entity.tenantopcount;

import br.com.kerubin.api.security.authorization.entity.tenant.TenantEntity;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantLookupResult;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantRepository;
import org.springframework.boot.test.mock.mockito.MockBean;
import br.com.kerubin.api.messaging.core.DomainEntityEventsPublisher;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.any;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collection;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantAutoComplete;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;
import br.com.kerubin.api.security.authorization.SecurityAuthorizationBaseEntityTest;


@RunWith(SpringRunner.class)
public class TenantOpCountServiceTest extends SecurityAuthorizationBaseEntityTest {
	
	private static final String[] IGNORED_FIELDS = { "id" };
	
	@TestConfiguration
	static class TenantOpCountServiceTestConfig {
		
		@Bean
		public TenantOpCountListFilterPredicate tenantOpCountListFilterPredicate() {
			return new TenantOpCountListFilterPredicateImpl();
		}
		
		@Bean
		public TenantOpCountService tenantOpCountService() {
			return new TenantOpCountServiceImpl();
		}
		
		@Bean
		public TenantOpCountDTOConverter tenantOpCountDTOConverter() {
			return new TenantOpCountDTOConverter();
		}
		
	}
	
	
	@Inject
	protected TenantOpCountService tenantOpCountService;
	
	@Inject
	protected TenantOpCountDTOConverter tenantOpCountDTOConverter;
	
	@Inject
	protected TenantOpCountRepository tenantOpCountRepository;
	
	@Inject
	protected TenantRepository tenantRepository;
	
	@MockBean
	protected DomainEntityEventsPublisher publisher;
	
	// BEGIN CREATE TESTS
	
	@Test
	public void testCreateWithAllFields() throws Exception {
		TenantOpCount tenantOpCount = new TenantOpCount();
		
		tenantOpCount.setId(java.util.UUID.randomUUID());
		tenantOpCount.setDescription(generateRandomString(255));
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(558173885277442506L);
		tenantOpCount.setMonthOp(-432024271424335940L);
		tenantOpCount.setDayOp(-1908897196985492385L);
		tenantOpCount.setHourOp(2065668265716847067L);
		tenantOpCount.setCountGet(-5195726638105580311L);
		tenantOpCount.setCountPost(3458252521320914886L);
		tenantOpCount.setCountPut(5198111155608644838L);
		tenantOpCount.setCountDelete(898275439496878504L);
		tenantOpCount.setCountList(-3295112760872946258L);
		tenantOpCount.setCountAutoComplete(3838452569528357335L);
		tenantOpCount.setCountOp(-4302950871399092562L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.create(tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testCreateWithOnlyRecairedFields() throws Exception {
		TenantOpCount tenantOpCount = new TenantOpCount();
		
		tenantOpCount.setId(java.util.UUID.randomUUID());
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-3331365414415690792L);
		tenantOpCount.setMonthOp(-8123585221456387309L);
		tenantOpCount.setDayOp(233626380512340042L);
		tenantOpCount.setHourOp(-2060030635431109247L);
		tenantOpCount.setCountGet(-8180885195032391579L);
		tenantOpCount.setCountPost(1198667486019259769L);
		tenantOpCount.setCountPut(2260237963379346621L);
		tenantOpCount.setCountDelete(-6495435247979944668L);
		tenantOpCount.setCountList(-1039124202302889082L);
		tenantOpCount.setCountAutoComplete(-506526557440677496L);
		tenantOpCount.setCountOp(-6894422983653856724L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.create(tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	// END CREATE TESTS
	
	// BEGIN READ TESTS
	
	@Test
	public void testRead1() {
		TenantOpCountEntity expectedTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = expectedTenantOpCountEntity.getId();
		TenantOpCount expected = tenantOpCountDTOConverter.convertEntityToDto(expectedTenantOpCountEntity);
		TenantOpCountEntity readTenantOpCountEntity = tenantOpCountService.read(id);
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(readTenantOpCountEntity);
		
		assertThat(actual).isEqualToComparingFieldByField(expected);
		
	}
	// END READ TESTS
	
	// BEGIN UPDATE TESTS
	
	@Test
	public void testUpdateWithAllFields() throws Exception {
		TenantOpCountEntity oldTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = oldTenantOpCountEntity.getId();
				
		TenantOpCount tenantOpCount = new TenantOpCount();
		tenantOpCount.setId(id);
		
		tenantOpCount.setDescription(generateRandomString(255));
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-7832716737573173463L);
		tenantOpCount.setMonthOp(2215855650013501720L);
		tenantOpCount.setDayOp(-8563098759632408737L);
		tenantOpCount.setHourOp(1446307795712825221L);
		tenantOpCount.setCountGet(-5212008866648622532L);
		tenantOpCount.setCountPost(-114639666206083863L);
		tenantOpCount.setCountPut(-665356269571752410L);
		tenantOpCount.setCountDelete(6886791341017842318L);
		tenantOpCount.setCountList(5509749921367102952L);
		tenantOpCount.setCountAutoComplete(-8479650986936549261L);
		tenantOpCount.setCountOp(-8257338559220183890L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.update(id, tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testUpdateWithOnlyRecairedFields() throws Exception {
		TenantOpCountEntity oldTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = oldTenantOpCountEntity.getId();
				
		TenantOpCount tenantOpCount = new TenantOpCount();
		tenantOpCount.setId(id);
		
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-652873021745224187L);
		tenantOpCount.setMonthOp(-5598231567855788497L);
		tenantOpCount.setDayOp(-7956060625339225280L);
		tenantOpCount.setHourOp(6421296305410991636L);
		tenantOpCount.setCountGet(-16975227694777470L);
		tenantOpCount.setCountPost(2914619070600242394L);
		tenantOpCount.setCountPut(7771091024701533215L);
		tenantOpCount.setCountDelete(5747262897286338259L);
		tenantOpCount.setCountList(-6081337465544011035L);
		tenantOpCount.setCountAutoComplete(-2480431692039441178L);
		tenantOpCount.setCountOp(3586326986050125539L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.update(id, tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	// END UPDATE TESTS
	
	// BEGIN DELETE TESTS
	
	@Test
	public void testDelete1() {
		TenantOpCountEntity expected = newTenantOpCountEntity();
		java.util.UUID id = expected.getId();
		
		
		expected = em.find(TenantOpCountEntity.class, id);
		assertThat(expected).isNotNull();
		tenantOpCountService.delete(id);
		verify(publisher, times(0)).publish(any());
		
		expected = em.find(TenantOpCountEntity.class, id);
		assertThat(expected).isNull();
	}
	// END DELETE TESTS
	
	// BEGIN LIST TESTS
	// END LIST TESTS
	
	// BEGIN Autocomplete TESTS
	@Test
	public void testAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for TenantOpCountEntity for this test.
		List<TenantOpCountEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newTenantOpCountEntity());
		}
		
		// Check if 33 records of TenantOpCountEntity was generated.
		long count = tenantOpCountRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of TenantOpCountEntity randomly from testData.
		final int resultSize = 1;
		List<TenantOpCountEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only TenantOpCountEntity.description field and configure this list as a filter.
		List<String> descriptionListFilter = filterTestData.stream().map(TenantOpCountEntity::getDescription).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = descriptionListFilter.get(0);
		Collection<TenantOpCountAutoComplete> result = tenantOpCountService.autoComplete(query);
		
		// Assert TenantOpCountAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(TenantOpCountAutoComplete::getDescription)
		.containsExactlyInAnyOrderElementsOf(descriptionListFilter);
	}
	
	// END Autocomplete TESTS
	
	
	// BEGIN Relationships Autocomplete TESTS
	
	@Test
	public void testTenantOpCountTenantAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for TenantEntity for this test.
		List<TenantEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newTenantEntity());
		}
		
		// Check if 33 records of TenantEntity was generated.
		long count = tenantRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of TenantEntity randomly from testData.
		final int resultSize = 1;
		List<TenantEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only TenantEntity.name field and configure this list as a filter.
		List<String> nameListFilter = filterTestData.stream().map(TenantEntity::getName).collect(Collectors.toList());
		String query = nameListFilter.get(0);
		
		Collection<TenantAutoComplete> result = tenantOpCountService.tenantTenantAutoComplete(query);
		
		assertThat(result).isNotNull().hasSize(1)
		.extracting(TenantAutoComplete::getName)
		.containsExactlyInAnyOrderElementsOf(nameListFilter);
	}
	
	// END Relationships Autocomplete TESTS
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN TESTS DEPENDENCIES
	
	
	protected TenantOpCountEntity newTenantOpCountEntity() {
		TenantOpCountEntity tenantOpCountEntity = new TenantOpCountEntity();
		
		tenantOpCountEntity.setDescription(generateRandomString(255));
		tenantOpCountEntity.setTenant(newTenantEntity());
		tenantOpCountEntity.setYearOp(-388483598465477232L);
		tenantOpCountEntity.setMonthOp(7242990720739739921L);
		tenantOpCountEntity.setDayOp(-470416826444560054L);
		tenantOpCountEntity.setHourOp(-6908190534094346591L);
		tenantOpCountEntity.setCountGet(-4257705295988651653L);
		tenantOpCountEntity.setCountPost(-4765512057774897654L);
		tenantOpCountEntity.setCountPut(-48725364926532010L);
		tenantOpCountEntity.setCountDelete(-6248438221226143680L);
		tenantOpCountEntity.setCountList(-8624850555248691087L);
		tenantOpCountEntity.setCountAutoComplete(-2980977834842386112L);
		tenantOpCountEntity.setCountOp(5335205587977663990L);
		
		tenantOpCountEntity = em.persistAndFlush(tenantOpCountEntity);
		return tenantOpCountEntity;
	}
	
	
	protected TenantOpCountLookupResult newTenantOpCountLookupResult(TenantOpCountEntity tenantOpCountEntity) {
		TenantOpCountLookupResult tenantOpCount = new TenantOpCountLookupResult();
		
		tenantOpCount.setId(tenantOpCountEntity.getId());
		tenantOpCount.setDescription(tenantOpCountEntity.getDescription());
		
		return tenantOpCount;
	}
	
	
	protected TenantEntity newTenantEntity() {
		TenantEntity tenantEntity = new TenantEntity();
		
		tenantEntity.setName(generateRandomString(255));
		tenantEntity.setMaxUsers(4747111472642084608L);
		tenantEntity.setBalance(new java.math.BigDecimal("2355.30816"));
		tenantEntity.setActive(false);
		
		tenantEntity = em.persistAndFlush(tenantEntity);
		return tenantEntity;
	}
	
	
	protected TenantLookupResult newTenantLookupResult(TenantEntity tenantEntity) {
		TenantLookupResult tenant = new TenantLookupResult();
		
		tenant.setId(tenantEntity.getId());
		tenant.setName(tenantEntity.getName());
		
		return tenant;
	}
	// END TESTS DEPENDENCIES

}
