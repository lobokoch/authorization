/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.security.authorization.entity.tenantopcount;

import br.com.kerubin.api.security.authorization.entity.tenant.TenantEntity;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantLookupResult;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantRepository;
import org.springframework.boot.test.mock.mockito.MockBean;
import br.com.kerubin.api.messaging.core.DomainEntityEventsPublisher;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.any;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collection;
import br.com.kerubin.api.security.authorization.entity.tenant.TenantAutoComplete;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;
import br.com.kerubin.api.security.authorization.SecurityAuthorizationBaseEntityTest;


@RunWith(SpringRunner.class)
public class TenantOpCountServiceTest extends SecurityAuthorizationBaseEntityTest {
	
	private static final String[] IGNORED_FIELDS = { "id" };
	
	@TestConfiguration
	static class TenantOpCountServiceTestConfig {
		
		@Bean
		public TenantOpCountListFilterPredicate tenantOpCountListFilterPredicate() {
			return new TenantOpCountListFilterPredicateImpl();
		}
		
		@Bean
		public TenantOpCountService tenantOpCountService() {
			return new TenantOpCountServiceImpl();
		}
		
		@Bean
		public TenantOpCountDTOConverter tenantOpCountDTOConverter() {
			return new TenantOpCountDTOConverter();
		}
		
	}
	
	
	@Inject
	protected TenantOpCountService tenantOpCountService;
	
	@Inject
	protected TenantOpCountDTOConverter tenantOpCountDTOConverter;
	
	@Inject
	protected TenantOpCountRepository tenantOpCountRepository;
	
	@Inject
	protected TenantRepository tenantRepository;
	
	@MockBean
	protected DomainEntityEventsPublisher publisher;
	
	// BEGIN CREATE TESTS
	
	@Test
	public void testCreateWithAllFields() throws Exception {
		TenantOpCount tenantOpCount = new TenantOpCount();
		
		tenantOpCount.setId(java.util.UUID.randomUUID());
		tenantOpCount.setDescription(generateRandomString(255));
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(7619948089085594268L);
		tenantOpCount.setMonthOp(-4264625476239523916L);
		tenantOpCount.setDayOp(2427108386218368804L);
		tenantOpCount.setHourOp(2084336466125539146L);
		tenantOpCount.setCountGet(6286819165330931585L);
		tenantOpCount.setCountPost(-4354616779798727255L);
		tenantOpCount.setCountPut(-7181999150937865677L);
		tenantOpCount.setCountDelete(8149339406121958191L);
		tenantOpCount.setCountList(7400450060408462304L);
		tenantOpCount.setCountAutoComplete(-7397290202791423904L);
		tenantOpCount.setCountOp(1302337079346368222L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.create(tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testCreateWithOnlyRecairedFields() throws Exception {
		TenantOpCount tenantOpCount = new TenantOpCount();
		
		tenantOpCount.setId(java.util.UUID.randomUUID());
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-8986943623040849642L);
		tenantOpCount.setMonthOp(5044091350440155516L);
		tenantOpCount.setDayOp(4202776715924078899L);
		tenantOpCount.setHourOp(8786812161679632513L);
		tenantOpCount.setCountGet(-8565887833457525802L);
		tenantOpCount.setCountPost(8316365595602027957L);
		tenantOpCount.setCountPut(554982028811938365L);
		tenantOpCount.setCountDelete(6778426456149592986L);
		tenantOpCount.setCountList(-4441199429352266859L);
		tenantOpCount.setCountAutoComplete(-7535426046679164976L);
		tenantOpCount.setCountOp(-9150630044238640867L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.create(tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	// END CREATE TESTS
	
	// BEGIN READ TESTS
	
	@Test
	public void testRead1() {
		TenantOpCountEntity expectedTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = expectedTenantOpCountEntity.getId();
		TenantOpCount expected = tenantOpCountDTOConverter.convertEntityToDto(expectedTenantOpCountEntity);
		TenantOpCountEntity readTenantOpCountEntity = tenantOpCountService.read(id);
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(readTenantOpCountEntity);
		
		assertThat(actual).isEqualToComparingFieldByField(expected);
		
	}
	// END READ TESTS
	
	// BEGIN UPDATE TESTS
	
	@Test
	public void testUpdateWithAllFields() throws Exception {
		TenantOpCountEntity oldTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = oldTenantOpCountEntity.getId();
				
		TenantOpCount tenantOpCount = new TenantOpCount();
		tenantOpCount.setId(id);
		
		tenantOpCount.setDescription(generateRandomString(255));
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-2925985005926136726L);
		tenantOpCount.setMonthOp(122893782257702284L);
		tenantOpCount.setDayOp(-2592640201014566518L);
		tenantOpCount.setHourOp(-7027243772512839694L);
		tenantOpCount.setCountGet(5066297794050930301L);
		tenantOpCount.setCountPost(-858632721217192841L);
		tenantOpCount.setCountPut(-8643571779203650334L);
		tenantOpCount.setCountDelete(-1303653021920042990L);
		tenantOpCount.setCountList(-2375031791653416233L);
		tenantOpCount.setCountAutoComplete(-2739190554886926564L);
		tenantOpCount.setCountOp(-7521245864289556162L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.update(id, tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testUpdateWithOnlyRecairedFields() throws Exception {
		TenantOpCountEntity oldTenantOpCountEntity = newTenantOpCountEntity();
		java.util.UUID id = oldTenantOpCountEntity.getId();
				
		TenantOpCount tenantOpCount = new TenantOpCount();
		tenantOpCount.setId(id);
		
		
		TenantEntity tenantEntityParam = newTenantEntity();
		TenantLookupResult tenant = newTenantLookupResult(tenantEntityParam);
		tenantOpCount.setTenant(tenant);
		
		tenantOpCount.setYearOp(-705764112024500098L);
		tenantOpCount.setMonthOp(-7579974647642806577L);
		tenantOpCount.setDayOp(-8398280428855420419L);
		tenantOpCount.setHourOp(4614603529231596215L);
		tenantOpCount.setCountGet(5312405192524378534L);
		tenantOpCount.setCountPost(8990660591038903574L);
		tenantOpCount.setCountPut(4454568130007287598L);
		tenantOpCount.setCountDelete(6849579667363384845L);
		tenantOpCount.setCountList(-7236207652103167579L);
		tenantOpCount.setCountAutoComplete(9094349912545429292L);
		tenantOpCount.setCountOp(590702160150792223L);
		TenantOpCountEntity tenantOpCountEntity = tenantOpCountService.update(id, tenantOpCountDTOConverter.convertDtoToEntity(tenantOpCount));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		TenantOpCount actual = tenantOpCountDTOConverter.convertEntityToDto(tenantOpCountEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(tenantOpCount, IGNORED_FIELDS);
		
		
		assertThat(actual.getTenant().getId()).isNotNull();
		assertThat(actual.getTenant()).isEqualToIgnoringGivenFields(tenantOpCount.getTenant(), IGNORED_FIELDS);
		
		
	}
	// END UPDATE TESTS
	
	// BEGIN DELETE TESTS
	
	@Test
	public void testDelete1() {
		TenantOpCountEntity expected = newTenantOpCountEntity();
		java.util.UUID id = expected.getId();
		
		
		expected = em.find(TenantOpCountEntity.class, id);
		assertThat(expected).isNotNull();
		tenantOpCountService.delete(id);
		verify(publisher, times(0)).publish(any());
		
		expected = em.find(TenantOpCountEntity.class, id);
		assertThat(expected).isNull();
	}
	// END DELETE TESTS
	
	// BEGIN LIST TESTS
	// END LIST TESTS
	
	// BEGIN Autocomplete TESTS
	@Test
	public void testAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for TenantOpCountEntity for this test.
		List<TenantOpCountEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newTenantOpCountEntity());
		}
		
		// Check if 33 records of TenantOpCountEntity was generated.
		long count = tenantOpCountRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of TenantOpCountEntity randomly from testData.
		final int resultSize = 1;
		List<TenantOpCountEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only TenantOpCountEntity.description field and configure this list as a filter.
		List<String> descriptionListFilter = filterTestData.stream().map(TenantOpCountEntity::getDescription).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = descriptionListFilter.get(0);
		Collection<TenantOpCountAutoComplete> result = tenantOpCountService.autoComplete(query);
		
		// Assert TenantOpCountAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(TenantOpCountAutoComplete::getDescription)
		.containsExactlyInAnyOrderElementsOf(descriptionListFilter);
	}
	
	// END Autocomplete TESTS
	
	
	// BEGIN Relationships Autocomplete TESTS
	
	@Test
	public void testTenantOpCountTenantAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for TenantEntity for this test.
		List<TenantEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newTenantEntity());
		}
		
		// Check if 33 records of TenantEntity was generated.
		long count = tenantRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of TenantEntity randomly from testData.
		final int resultSize = 1;
		List<TenantEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only TenantEntity.name field and configure this list as a filter.
		List<String> nameListFilter = filterTestData.stream().map(TenantEntity::getName).collect(Collectors.toList());
		String query = nameListFilter.get(0);
		
		Collection<TenantAutoComplete> result = tenantOpCountService.tenantTenantAutoComplete(query);
		
		assertThat(result).isNotNull().hasSize(1)
		.extracting(TenantAutoComplete::getName)
		.containsExactlyInAnyOrderElementsOf(nameListFilter);
	}
	
	// END Relationships Autocomplete TESTS
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN TESTS DEPENDENCIES
	
	
	protected TenantOpCountEntity newTenantOpCountEntity() {
		TenantOpCountEntity tenantOpCountEntity = new TenantOpCountEntity();
		
		tenantOpCountEntity.setDescription(generateRandomString(255));
		tenantOpCountEntity.setTenant(newTenantEntity());
		tenantOpCountEntity.setYearOp(-5393827826027177040L);
		tenantOpCountEntity.setMonthOp(8430981284273521803L);
		tenantOpCountEntity.setDayOp(4495706389792272164L);
		tenantOpCountEntity.setHourOp(1130406315430951149L);
		tenantOpCountEntity.setCountGet(1037987051918361133L);
		tenantOpCountEntity.setCountPost(7026823425202254702L);
		tenantOpCountEntity.setCountPut(5941990758140791131L);
		tenantOpCountEntity.setCountDelete(-7326970111861054085L);
		tenantOpCountEntity.setCountList(3899356594565228626L);
		tenantOpCountEntity.setCountAutoComplete(8878550637868436125L);
		tenantOpCountEntity.setCountOp(-498914834866003673L);
		
		tenantOpCountEntity = em.persistAndFlush(tenantOpCountEntity);
		return tenantOpCountEntity;
	}
	
	
	protected TenantOpCountLookupResult newTenantOpCountLookupResult(TenantOpCountEntity tenantOpCountEntity) {
		TenantOpCountLookupResult tenantOpCount = new TenantOpCountLookupResult();
		
		tenantOpCount.setId(tenantOpCountEntity.getId());
		tenantOpCount.setDescription(tenantOpCountEntity.getDescription());
		
		return tenantOpCount;
	}
	
	
	protected TenantEntity newTenantEntity() {
		TenantEntity tenantEntity = new TenantEntity();
		
		tenantEntity.setName(generateRandomString(255));
		tenantEntity.setMaxUsers(7177143562092341104L);
		tenantEntity.setBalance(new java.math.BigDecimal("3111.1072"));
		tenantEntity.setActive(false);
		
		tenantEntity = em.persistAndFlush(tenantEntity);
		return tenantEntity;
	}
	
	
	protected TenantLookupResult newTenantLookupResult(TenantEntity tenantEntity) {
		TenantLookupResult tenant = new TenantLookupResult();
		
		tenant.setId(tenantEntity.getId());
		tenant.setName(tenantEntity.getName());
		
		return tenant;
	}
	// END TESTS DEPENDENCIES

}
